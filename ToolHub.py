import base64
base64_program = "import os
import time
import requests
import importlib

black="\033[0;30m"
red="\033[0;31m"
bred="\033[1;31m"
green="\033[0;32m"
bgreen="\033[1;32m"
yellow="\033[0;33m"
byellow="\033[1;33m"
blue="\033[0;34m"
bblue="\033[1;34m"
purple="\033[0;35m"
bpurple="\033[1;35m"
cyan="\033[0;36m"
bcyan="\033[1;36m"
white="\033[0;37m"
nc="\033[00m"


# logo.py

logo=f"""
{bgreen}╭━━━━╮╱╱╱╱╭╮╱╱{byellow}╭╮╱╭╮╱╱╭╮{bgreen}
┃╭╮╭╮┃╱╱╱╱┃┃╱╱{byellow}┃┃╱┃┃╱╱┃┃{bgreen}
╰╯┃┃┣┻━┳━━┫┃╱╱{byellow}┃╰━╯┣╮╭┫╰━╮{bgreen}
╱╱┃┃┃╭╮┃╭╮┃┣━━{byellow}┫╭━╮┃┃┃┃╭╮┃{bgreen}
╱╱┃┃┃╰╯┃╰╯┃╰┳━{byellow}┫┃╱┃┃╰╯┃╰╯┃{bgreen}
╱╱╰╯╰━━┻━━┻━╯{byellow}╱╰╯╱{byellow}╰┻━━┻━━╯{bgreen}
    {bcyan}Tool by Cyber-D{red}[{purple}v{green}3.0{red}]
"""

secondlogo=f"""
{bgreen}╭━━━━╮╱╱╱╱╭╮╱╱{byellow}╭╮╱╭╮╱╱╭╮{bgreen}
┃╭╮╭╮┃╱╱╱╱┃┃╱╱{byellow}┃┃╱┃┃╱╱┃┃{bgreen}
╰╯┃┃┣┻━┳━━┫┃╱╱{byellow}┃╰━╯┣╮╭┫╰━╮{bgreen}
╱╱┃┃┃╭╮┃╭╮┃┣━━{byellow}┫╭━╮┃┃┃┃╭╮┃{bgreen}
╱╱┃┃┃╰╯┃╰╯┃╰┳━{byellow}┫┃╱┃┃╰╯┃╰╯┃{bgreen}
╱╱╰╯╰━━┻━━┻━╯╱╰╯╱{byellow}╰┻━━┻━━╯{bgreen}
"""


mainmenu=f"""
_____________________
|{white}----{bcyan}Cyber-D Army{white}----{red}|
|                    {red}|
|{white}-{red}x{white}-{red}[{green}1{red}]{white}-{yellow}>{green}Tools{red}       |
|{white}-{red}x{white}-{red}[{green}2{red}]{white}-{yellow}>{green}Unintall{red}    |
|{white}-{red}x{white}-{red}[{green}3{red}]{white}-{yellow}>{green}Update{red}      |
|{white}-{red}x{white}-{red}[{green}4{red}]{white}-{yellow}>{green}About {red}      |
|{white}-{red}x{white}-{red}[{green}5{red}]{white}-{yellow}>{green}Exit {red}       |
|____________________|

"""

def about():
    os.system("clear")
    print(secondlogo)
    print(f"""
{bcyan}[-]This tool is Created By Cyber-D Army

{yellow}Author    :  K.D.O x Hawk x Krishna
Github    :  https://github.com/kdo2064
Telegram  :  https://t.me/cyberdoffficial
Discord   :  https://discord.gg/v8FVzsuH
Version   :  1.0

{red}[-]Warning:

{blue}This Tool is made for educational purpose
only ! Author will not be responsible for
any misuse of this toolkit !

{bpurple}[-]About Update:
{bred}some Bug fixed..!

{bgreen}[-]Dev SocialMedia
{red}[{byellow}1{red}]{white}-{red}>{bcyan}K.D.O   : Instagram
{red}[{byellow}2{red}]{white}-{red}>{bcyan}Hawk    : Instgram
{red}[{byellow}3{red}]{white}-{red}>{bcyan}krishna : Instagram
{red}[{byellow}0{red}]{white}-{red}>{bcyan}Exit

{bcyan}[-]special thank:

{red}[{byellow}~{red}]{white}-{red}>{bpurple}Rahul Garg{white}
""")


def menu():
    print(f"""
{red}[{green}1{red}]{white}-{red}>{bcyan}Cyber-D Virus          {red}[{green}61{red}]{white}-{red}>{bcyan}killshot         
{red}[{green}2{red}]{white}-{red}>{bcyan}CamPhish               {red}[{green}62{red}]{white}-{red}>{bcyan}OSIF       
{red}[{green}3{red}]{white}-{red}>{bcyan}TigerVirus             {red}[{green}63{red}]{white}-{red}>{bcyan}Facebooktoolkit       
{red}[{green}4{red}]{white}-{red}>{bcyan}T-HYDRA                {red}[{green}64{red}]{white}-{red}>{bcyan}termuxlazyscript         
{red}[{green}5{red}]{white}-{red}>{bcyan}BruteX                 {red}[{green}65{red}]{white}-{red}>{bcyan}tmscanner          
{red}[{green}6{red}]{white}-{red}>{bcyan}ighack                 {red}[{green}66{red}]{white}-{red}>{bcyan}hotstarotpbypass     
{red}[{green}7{red}]{white}-{red}>{bcyan}SocialBox-Termux       {red}[{green}67{red}]{white}-{red}>{bcyan}instabrute  
{red}[{green}8{red}]{white}-{red}>{bcyan}maskphish              {red}[{green}68{red}]{white}-{red}>{bcyan}telegramscraper
{red}[{green}9{red}]{white}-{red}>{bcyan}EasY_HaCk              {red}[{green}69{red}]{white}-{red}>{bcyan}termuxstyle
{red}[{green}10{red}]{white}-{red}>{bcyan}IP-Tracer             {red}[{green}70{red}]{white}-{red}>{bcyan}osiig
{red}[{green}11{red}]{white}-{red}>{bcyan}mrphish               {red}[{green}71{red}]{white}-{red}>{bcyan}beastbomber  
{red}[{green}12{red}]{white}-{red}>{bcyan}Pyshell               {red}[{green}72{red}]{white}-{red}>{bcyan}seeu
{red}[{green}13{red}]{white}-{red}>{bcyan}Facebook-BruteForce   {red}[{green}73{red}]{white}-{red}>{bcyan}xlr8bomber  
{red}[{green}14{red}]{white}-{red}>{bcyan}sherlock              {red}[{green}74{red}]{white}-{red}>{bcyan}grabcam  
{red}[{green}15{red}]{white}-{red}>{bcyan}SMS-Bomber-300-Free   {red}[{green}75{red}]{white}-{red}>{bcyan}rootgit  
{red}[{green}16{red}]{white}-{red}>{bcyan}spymer                {red}[{green}76{red}]{white}-{red}>{bcyan}snap  
{red}[{green}17{red}]{white}-{red}>{bcyan}darkdump              {red}[{green}77{red}]{white}-{red}>{bcyan}igbrute  
{red}[{green}18{red}]{white}-{red}>{bcyan}routersploit          {red}[{green}78{red}]{white}-{red}>{bcyan}lordphish  
{red}[{green}19{red}]{white}-{red}>{bcyan}Email-Spammer         {red}[{green}79{red}]{white}-{red}>{bcyan}tstyle  
{red}[{green}20{red}]{white}-{red}>{bcyan}emailspam             {red}[{green}80{red}]{white}-{red}>{bcyan}moddedubuntu  
{red}[{green}21{red}]{white}-{red}>{bcyan}AdminHack             {red}[{green}81{red}]{white}-{red}>{bcyan}olaotpbypass  
{red}[{green}22{red}]{white}-{red}>{bcyan}sqlmap                {red}[{green}82{red}]{white}-{red}>{bcyan}osif  
{red}[{green}23{red}]{white}-{red}>{bcyan}AndroRAT              {red}[{green}83{red}]{white}-{red}>{bcyan}fyn  
{red}[{green}24{red}]{white}-{red}>{bcyan}TermuxCyberArmy       {red}[{green}84{red}]{white}-{red}>{bcyan}ubereatphishing  
{red}[{green}25{red}]{white}-{red}>{bcyan}Ransomware            {red}[{green}85{red}]{white}-{red}>{bcyan}whatsappphishing  
{red}[{green}26{red}]{white}-{red}>{bcyan}Brutegram             {red}[{green}86{red}]{white}-{red}>{bcyan}e4gl3osint  
{red}[{green}27{red}]{white}-{red}>{bcyan}CCTV                  {red}[{green}87{red}]{white}-{red}>{bcyan}lazymux  
{red}[{green}28{red}]{white}-{red}>{bcyan}Fox-WebINFO           {red}[{green}88{red}]{white}-{red}>{bcyan}genvirus  
{red}[{green}29{red}]{white}-{red}>{bcyan}fox_userfinder        {red}[{green}89{red}]{white}-{red}>{bcyan}wannatool  
{red}[{green}30{red}]{white}-{red}>{bcyan}Fox-DDOSER            {red}[{green}90{red}]{white}-{red}>{bcyan}paybag  
{red}[{green}31{red}]{white}-{red}>{bcyan}WifiFtp               {red}[{green}91{red}]{white}-{red}>{bcyan}freeproxy  
{red}[{green}32{red}]{white}-{red}>{bcyan}muclocker             {red}[{green}92{red}]{white}-{red}>{bcyan}tbomb2  
{red}[{green}33{red}]{white}-{red}>{bcyan}bannergenerator       {red}[{green}93{red}]{white}-{red}>{bcyan}qurxin  
{red}[{green}34{red}]{white}-{red}>{bcyan}wishfish              {red}[{green}94{red}]{white}-{red}>{bcyan}genvirus2  
{red}[{green}35{red}]{white}-{red}>{bcyan}mobdroid              {red}[{green}95{red}]{white}-{red}>{bcyan}b2k4  
{red}[{green}36{red}]{white}-{red}>{bcyan}ipgeolocation         {red}[{green}96{red}]{white}-{red}>{bcyan}angryfuzzer  
{red}[{green}37{red}]{white}-{red}>{bcyan}tracenum              {red}[{green}97{red}]{white}-{red}>{bcyan}knockmail  
{red}[{green}38{red}]{white}-{red}>{bcyan}Foxproxyleecher       {red}[{green}98{red}]{white}-{red}>{bcyan}santetonline  
{red}[{green}39{red}]{white}-{red}>{bcyan}pestilence            {red}[{green}99{red}]{white}-{red}>{bcyan}optiva
{red}[{green}40{red}]{white}-{red}>{bcyan}Tbomb                 {red}[{green}100{red}]{white}-{red}>{bcyan}cyberscan
{red}[{green}41{red}]{white}-{red}>{bcyan}ipdrone               {red}[{green}101{red}]{white}-{red}>{bcyan}PyPhisher
{red}[{green}42{red}]{white}-{red}>{bcyan}darkflytool           {red}[{green}102{red}]{white}-{red}>{bcyan}Emailnuker
{red}[{green}43{red}]{white}-{red}>{bcyan}exploit               {red}[{green}103{red}]{white}-{red}>{bcyan}beyawak 
{red}[{green}44{red}]{white}-{red}>{bcyan}youtubepro            {red}[{green}104{red}]{white}-{red}>{bcyan}xlr8bomber2  
{red}[{green}45{red}]{white}-{red}>{bcyan}zhoiinsta             {red}[{green}105{red}]{white}-{red}>{bcyan}wacrasher  
{red}[{green}46{red}]{white}-{red}>{bcyan}cybersh               {red}[{green}106{red}]{white}-{red}>{bcyan}Aoxdeface  
{red}[{green}47{red}]{white}-{red}>{bcyan}wplksincrypt          {red}[{green}107{red}]{white}-{red}>{bcyan}unitools  
{red}[{green}48{red}]{white}-{red}>{bcyan}crackertool           {red}[{green}108{red}]{white}-{red}>{bcyan}hackerwasi  
{red}[{green}49{red}]{white}-{red}>{bcyan}matrix                {red}[{green}109{red}]{white}-{red}>{bcyan}iprover  
{red}[{green}50{red}]{white}-{red}>{bcyan}redhawk               {red}[{green}110{red}]{white}-{red}>{bcyan}rpcscan  
{red}[{green}51{red}]{white}-{red}>{bcyan}allhackingtool        {red}[{green}111{red}]{white}-{red}>{bcyan}Dirattack  
{red}[{green}52{red}]{white}-{red}>{bcyan}lucifer               {red}[{green}112{red}]{white}-{red}>{bcyan}virusbuilder  
{red}[{green}53{red}]{white}-{red}>{bcyan}lazybee               {red}[{green}113{red}]{white}-{red}>{bcyan}wplksincrypt2  
{red}[{green}54{red}]{white}-{red}>{bcyan}userfinder            {red}[{green}114{red}]{white}-{red}>{bcyan}ipicker  
{red}[{green}55{red}]{white}-{red}>{bcyan}MBOMBER               {red}[{green}115{red}]{white}-{red}>{bcyan}megafilestealer  
{red}[{green}56{red}]{white}-{red}>{bcyan}whatsappbanner        {red}[{green}116{red}]{white}-{red}>{bcyan}encodedecode
{red}[{green}57{red}]{white}-{red}>{bcyan}ghunt                 {red}[{green}117{red}]{white}-{red}>{bcyan}asciic  
{red}[{green}58{red}]{white}-{red}>{bcyan}wikipromax            {red}[{green}118{red}]{white}-{red}>{bcyan}Boydomos  
{red}[{green}59{red}]{white}-{red}>{bcyan}osif                  {red}[{green}119{red}]{white}-{red}>{bcyan}crack  
{red}[{green}60{red}]{white}-{red}>{bcyan}antiddos              {red}[{green}120{red}]{white}-{red}>{bcyan}shortboy  

{red}[{green}0{red}]{white}-{red}>{bcyan}Exit                   {red}[{green}00{red}]{white}-{red}>{bcyan}About 
    """)

def cyberdvi():
    os.system("clear")
    print(logo)
    print(f"""
{red}[-]Warning:

{blue}This Virus can be Danger, Don't use
this virus for fun!

{bgreen}[-]Cyber-D Virus
{red}[{byellow}1{red}]{white}-{red}>{bcyan}Love(apk)             : +18 Harmless
{red}[{byellow}2{red}]{white}-{red}>{bcyan}Love yek pal ka(apk)  : Harmful
{red}[{byellow}3{red}]{white}-{red}>{bcyan}King of King(website) : Instagram
{red}[{byellow}0{red}]{white}-{red}>{bcyan}Exit
""")



# tool.py

def zphisher():
    os.system("pkg install tur-repo && ")

def camphish():
    os.system("cd $HOME && git clone https://github.com/techchipnet/CamPhish && cd CamPhish && bash camphish.sh")

def tigervirus():
    os.system("cd $HOME && apt update && apt upgrade -y &&  && git clone https://github.com/Devil-Tigers/TigerVirus.git && cd TigerVirus && bash TigerVirus.sh")

def THYDRA():
    os.system("cd $HOME && apt update && apt upgrade && git clone https://github.com/isuruwa/T-HYDRA && cd T-HYDRA/Files && bash thyins.sh")

def BruteX():
    os.system("cd $HOME && apt update && apt upgrade && apt install git -y && git clone https://github.com/MrHacker-X/BruteX.git && cd BruteX && chmod +x * && bash setup.sh")

def ighack():
    os.system("cd $HOME && apt-get update -y && apt-get upgrade -y && pkg install python -y && pkg install python2 -y && pkg install git -y && pip install lolcat && git clone https://github.com/noob-hackers/ighack && cd $HOME && cd ighack && bash setup")

def SocialBox():
    os.system("cd $HOME && apt-get update && apt-get install git && git clone https://github.com/samsesh/SocialBox-Termux.git && cd SocialBox-Termux && chmod +x install-sb.sh && ./install-sb.sh")

def maskphish():
    os.system("cd $HOME && git clone https://github.com/jaykali/maskphish && cd maskphish && bash maskphish.sh")

def easyhack():
    os.system("cd $HOME && pkg update && pkg upgrade && pkg install git && git clone https://github.com/sabri-zaki/EasY_HaCk && cd EasY_HaCk/ && chmod +x install.sh")

def IPTracer():
    os.system("cd $HOME && apt update && apt install git -y && git clone https://github.com/rajkumardusad/IP-Tracer.git && cd IP-Tracer && chmod +x install && ./install")

def mrphish():
    os.system("cd $HOME && apt-get update -y && apt-get upgrade -y && pkg install python -y && pkg install python2 -y && pkg install git -y && pip install lolcat && git clone https://github.com/noob-hackers/mrphish && cd mrphish && bash setup && bash mrphish ")

def Pyshell():
    os.system("cd $HOME &&  git clone https://github.com/khalednassar702/Pyshell && cd Pyshell && ./Pyshell ")

def FacebookBruteForce():
    os.system("cd $HOME && git clone https://github.com/IAmBlackHacker/Facebook-BruteForce && cd Facebook-BruteForce && python3 -m pip install requests bs4 && python3 -m pip install mechanize && python3 fb.py ")

def sherlock():
    os.system("cd $HOME && git clone https://github.com/sherlock-project/sherlock.git && cd sherlock && python3 -m pip install -r requirements.txt")

def smsbomber300free():
    os.system("cd $HOME && apt update && apt upgrade && pkg install python git && pip install requests colorama && git clone https://github.com/Ivan-Hacker-700/SMS-Bomber-300-Free && ls && cd SMS-Bomber-300-Free && ls && python SMS-Bomber.py && cd SMS-Bomber-300-Free && python SMS-Bomber.py ")

def spymer():
    os.system("cd $HOME && apt upgrade && apt install git && git clone https://github.com/FSystem88/spymer && cd spymer/install.sh ")

def darkdump():
    os.system("cd $HOME && git clone https://github.com/josh0xA/darkdump && cd darkdump && python3 -m pip install -r requirements.txt && python3 darkdump.py --help ")

def routersploit():
    os.system("cd $HOME && git clone https://www.github.com/threat9/routersploit && cd routersploit && python3 -m pip install -r requirements.txt && python3 rsf.py ")
    
def EmailSpammer():
    os.system("cd $HOME && git clone https://github.com/mishakorzik/Email-Spammer && pip3 install requests && pip3 install smtp ")

def emailspam():
    os.system("cd $HOME && git clone https://github.com/Curioo/emailpyspam.git && pip3 install -r requirements.txt && cd emailspam/ && python3 emailspam.py  ")

def AdminHack():
    os.system("cd $HOME && git clone https://github.com/mishakorzik/AdminHack && cd AdminHack && bash setup.sh ")

def sqlmap():
    os.system("cd $HOME && git clone --depth 1 https://github.com/sqlmapproject/sqlmap.git && sqlmap-dev && python sqlmap.py -h")

def AndroRAT():
    os.system("cd $HOME && git clone https://github.com/karma9874/AndroRAT.git && cd AndroRAT && pip install -r requirements.txt")

def TermuxCyberArmy():
    os.system("cd $HOME && git clone https://github.com/Err0r-ICA/TermuxCyberArmy && cd TermuxCyberArmy && python2 TCA ")

def Ransomware():
    os.system("cd $HOME && git clone https://github.com/Err0r-ICA/Ransomware && cd Ransomware && python3 Ransomware ")

def Brutegram():
    os.system("cd $HOME && git clone https://github.com/Err0r-ICA/Brutegram && cd Brutegram && bash Brutegram ")

def cctv():
    os.system("cd $HOME && git clone https://github.com/Err0r-ICA/CCTV.git && cd CCTV && python2 CCTV")

def FoxWebInfo():
    os.system("cd $HOME && git clone https://github.com/BlackFoxTM/Fox-WebINFO/ && cd Fox-WebINFO && pip3 install -r requirements.txt && python3 wb_tools.py ")

def foxuserfinder():
    os.system("cd $HOME && git clone https://github.com/BlackFoxTM/Fox-UserFinder/fox_userfinder.py && cd fox-UserFinder && python3 fox_userfinder.py")

def foxddoser():
    os.system("cd $HOME && git clone https://github.com/BlackFoxTM/Fox-DDOSER && cd Fox-DDOSER && pip3 install -r requirements.txt && python3 fox-ddos.py ")

def wififtp():
    os.system("cd $HOME && pip3 install pyftpdlib && git clone https://github.com/KasRoudra/wififtp && cd wififtp && python3 ftp.py ")

def muclocker():
    os.system("cd $HOME && git clone https://github.com/KasRoudra/muxlock && cd muxlock && python setup.py  ")

def bannergenerator():
    os.system("cd $HOME && git clone https://github.com/KasRoudra/banner-generator && cd banner-generator && chmod +x * && bash requirements.sh && python2 generator.py ")

def wishfish():
    os.system("cd $HOME && git clone https://github.com/kinghacker0/WishFish && cd WishFish && bash wishfish.sh ")

def mobdroid():
    os.system("cd $HOME && git clone https://github.com/kinghacker0/mob-droid && cd mob-droid && python2 mob-droid.py ")

def ipgeolocation():
    os.system("cd $HOME && git clone https://github.com/BlackFoxTM/ipgeolocation && cd ipgeolocation && pip3 install requests colorama && python3 IPLocation.py ")

def tracenum():
    os.system("cd $HOME && git clone https://github.com/BlackFoxTM/trace_num && cd trace_num && pip3 install -r requirements.txt && python3 main.py  ")

def Foxproxyleecher():
    os.system("cd $HOME && git clone https://github.com/BlackFoxTM/FoxProxyLeecher.git && cd FoxProxyLeecher && pip3 install pyfiglet requests && python3 fox-proxy.py ")

def pestilence():
    os.system("cd $HOME && git clone https://www.github.com/Err0r-ICA/Pestilence && cd Pestilence && pip install --user -r requirements.txt ")

def Tbomb():
    os.system("cd $HOME && pkg install git -y  && pkg install python -y  && git clone https://github.com/TheSpeedX/TBomb.git && cd TBomb && ./TBomb.sh ")

def ipdrone():
    os.system("cd $HOME && apt-get update -y && apt-get upgrade -y && pkg install python -y && pkg install python2 -y && pkg install git -y && pip install lolcat && pip install requests && git clone https://github.com/noob-hackers/ipdrone && cd $HOME && ls && cd ipdrone && ls && python ipdrone.py -v ")

def darkflytool():
    os.system("cd $HOME && pkg install python2 && pkg install git && git clone https://github.com/Ranginang67/DarkFly-Tool && cd DarkFly-Tool && python2 install.py && python2 DarkFly ")

def exploit():
    os.system("cd $HOME && pkg update && pkg upgrade -y && pkg install python3 -y && git clone https://github.com/popeye0013/exploit && cd exploit && bash install.sh && python3 exploit.py ")

def youtubepro():
    os.system("cd $HOME && apt update && apt upgrade && git clone https://github.com/samay825/Youtube-Pro && cd Youtube-Pro && pip install -r requirements.txt && python3 main.py ")

def zhoiinsta():
    os.system("cd $HOME && apt update && apt upgrade && apt install git && apt install python && pip install instaloader && git clone https://github.com/MR-S74RK/ZHOI-INSTA/ && cd ZHOI-INSTA && chmod +x * && pip install -r requirements.txt && python3 zhoi.py")

def cybersh():
    os.system("cd $HOME && apt update -y && apt upgrade -y && pkg install git -y && pkg install python -y && pip install requests && git clone https://github.com/ShTasrif/cybersh && cd cybersh && python pkg.py  ")

def wplksincrypt():
    os.system("cd $HOME && apt update && apt upgrade && git clone https://github.com/samay825/Wp-Lk-Sincrypt && cd Wp-Lk-Sincrypt && python3 Run.py  ")

def crackertool():
    os.system("cd $HOME && apt upgrade -y && apt update -y && pkg install git && pkg install python -y && git clone https://github.com/cracker911181/Cracker-Tool && cd Cracker-Tool && python cracker-main.py ")

def deface():
    os.system("cd $HOME && pkg install python2 && pip2 install requests && pkg install git && git clone https://github.com/B012ED/deface.git && cd deface && python2 def.py ")

def matrix():
    os.system("pkg install cmatrix")
    print(f"{green}type cmatrix and click enter to run it")

def redhawk():
    os.system("cd $HOME && git clone https://github.com/Tuhinshubhra/RED_HAWK && cd RED_HAWK && pkg install php && php rhawk.php")

def allhackingtool():
    os.system("cd $HOME && apt update && apt upgrade && termux-setup-storage && apt install git && git clone https://github.com/mishakorzik/AllHackingTools && cd AllHackingTools && bash Install.sh ")

def lucifer():
    os.system("cd $HOME && git clone https://github.com/rixon-cochi/Lucifer.git && ls && cd Lucifer && chmod +x * && bash setup.sh && ls && bash instacracker.sh ")
    
def lazybee():
    os.system("cd $HOME && apt-get update -y && pip install lolcat && git clone https://github.com/noob-hackers/lazybee && cd lazybee && python2 lazybee.py ")

def Userfinder():
    os.system("cd $HOME && git clone https://github.com/mishakorzik/UserFinder && cd UserFinder && bash UserFinder.sh ")

def Mbomb():
    os.system("cd $HOME && pkg install python2 -y && pkg install git -y && git clone https://github.com/palahsu/MBomb.git && cd MBomb && python MBomb.py or python2 MBomb.py ")

def Whatsappbanner():
    os.system("cd $HOME && git clone https://github.com/kdo2064/WhatsappBanner && cd WhatsappBanner && python3 main.py")

def Ghunt():
    os.system("cd $HOME && git clone https://github.com/mxrch/GHunt && pip3 install -r requirements.txt && python check_and_gen.py && python hunt.py ")

def wikipromax():
    os.system("cd $HOME && git clone https://github.com/GH05T-HUNTER5/wiki-promax && cd wiki-promax && bash install.sh && ./wiki-promax")

def OSIF():
    os.system("cd $HOME && git clone https://github.com/ciku370/OSIF && cd OSIF && pip2 install -r requirements.txt && python2 osif.py")

def antiddos():
    os.system("cd $HOME && git clone https://github.com/anti-ddos/Anti-DDOS && cd Anti-DDOS && bash anti-ddos.sh ")

def killshot():
    os.system("cd $HOME && git clone https://github.com/bahaabdelwahed/killshot && cd killshot && ruby setup.rb && ruby killshot.rb")

def OSIF():
    os.system("cd $HOME && pkg update upgrade && pkg install git python2 && git clone https://github.com/ciku370/OSIF && cd OSIF && pip2 install -r requirements.txt && python2 osif.py ")

def Facebooktoolkit():
    os.system("cd $HOME && pkg install php && pkg install curl && pkg update && git clone https://github.com/warifp/FacebookToolkit && cd FacebookToolkit && composer install")

def termuxlazyscript():
    os.system("cd $HOME && git clone https://github.com/TechnicalMujeeb/Termux-Lazyscript.git && cd Termux-Lazyscript && chmod +x * && sh setup.sh && python2 ls.py ")

def Tmscanner():
    os.system("cd $HOME && git clone https://github.com/TechnicalMujeeb/TM-scanner.git && cd TM-scanner && chmod +x * && sh install.sh && python2 tmscanner.py ")

def hotstarotpbypass():
    os.system("cd $HOME && git clone https://github.com/Ignitetch/Hotstar-otp-bypass.git && cd Hotstar-otp-bypass/ && chmod 777 * && ./Hotstar.sh ")

def instabrute():
    os.system("cd $HOME && pkg install python git -y && pip install requests && pip install bs4 && git clone https://github.com/TERMUXID3/instabrute && cd instabrute && python run.py ")

def telegramscraper():
    os.system("cd $HOME && pkg install -y git python && git clone https://github.com/th3unkn0n/TeleGram-Scraper.git && cd TeleGram-Scraper && python3 setup.py -i && python3 setup.py -c && python3 scraper.py ")

def termuxstyle():
    os.system("cd $HOME && git clone https://github.com/adi1090x/termux-style && cd termux-style && ./install")

def osiig():
    os.system("cd $HOME && git clone https://github.com/adi1090x/termux-style && cd termux-style && ./install")

def beastbomber():
    os.system("cd $HOME && git clone https://github.com/un1cum/Beast_Bomber && pip install -r requirements.txt && python beast.py ")

def seeu():
    os.system("cd $HOME && git clone https://github.com/noob-hackers/seeu && cd seeu && bash seeu.sh ")

def xlr8bomber():
    os.system("cd $HOME && pkg install git wget python3 -y && git clone https://github.com/anubhavanonymous/XLR8_BOMBER && cd XLR8_BOMBER && python xlr8.py ")

def grabcam():
    os.system("cd $HOME && apt-get update -y && pip install lolcat && git clone https://github.com/Abhi6722/grabcam && cd grabcam && bash grabcam.sh ")

def rootgit():
    os.system("cd $HOME && git clone https://github.com/adarshaddee/root.git && cd root && chmod +x main && ./main")

def snap():
    os.system("cd $HOME && git clone https://github.com/noob-hackers/snap && cd snap && bash snap.sh ")

def igbrute():
    os.system("cd $HOME && $ git clone https://github.com/dark-player/igbrute && cd igbrute && bash setup && bash igbrute.sh ")

def lordphish():
    os.system("cd $HOME && apt-get update -y && git clone https://github.com/Black-Hell-Team/LordPhish.git && cd LordPhish && bash setup.sh && bash lord.sh ")

def tstyle():
    os.system("cd $HOME && apt update && git clone https://github.com/htr-tech/tstyle && cd tstyle && bash setup.sh ")

def moddedubuntu():
    os.system("cd $HOME && git clone --depth=1 https://github.com/modded-ubuntu/modded-ubuntu.git && cd modded-ubuntu && bash setup.sh ")

def olaotpbypass():
    os.system("cd $HOME && git clone https://github.com/Ignitetch/ola-otpbypass.git && cd ola-otpbypass/ && chmod 777 * && ./ola.sh ")

def osif():
    os.system("cd $HOME &&  git clone https://github.com/ciku370/OSIF && cd OSIF && pip2 install -r requirements.txt && python2 osif.py ")

def fyn():
    os.system("cd $HOME && pkg update && git clone https://gitlab.com/W1nz0N/fyc.git && cd fyc && pip2 install -r requirements.txt && python2 run.py ")

def ubereatsphishing():
    os.system("cd $HOME && git clone https://github.com/Ignitetch/UberEats-Phishing.git && cd UberEats-Phishing/ && chmod 777 * && ./Uber-eats.sh ")

def whatsappphishing():
    os.system("cd $HOME && git clone https://github.com/Ignitetch/whatsapp-phishing.git && cd whatsapp-phishing && chmod 777 Whatsapp.sh && ./Whatsapp.sh ")

def E4GL3OSINT():
    os.system("cd $HOME && pkg install wget && wget https://raw.githubusercontent.com/C0MPL3XDEV/E4GL30S1NT/main/install.sh && bash install.sh ")

def Lazymux():
    os.system("cd $HOME && git clone https://github.com/Gameye98/Lazymux && cd Lazymux && python2 lazymux.py")

def genvirus():
    os.system("cd $HOME && git clone git://github.com/Ign0r3dH4x0r/GenVirus.git && cd GenVirus && bash GenVirus.sh ")

def wannatool():
    os.system("cd $HOME && apt upgrade -y;apt update -y && git clone https://github.com/Err0r-ICA/WannaTool && cd WannaTool && chmod +x * && bash WannaTool")

def paybag():
    os.system("cd $HOME && apt install python wget && git clone https://github.com/Deadpool2000/Paybag.git && cd Paybag && pip install -r requirements.txt && python paybag.py ")

def freeproxy():
    os.system("cd $HOME && pkg install git && git clone https://github.com/mishakorzik/Free-Proxy && cd Free-Proxy && bash Setup.sh ")

def tbomb2():
    os.system("cd $HOME && apt update && git clone https://github.com/IncredibleHacker/TBomb2.0 && cd TBomb2.0 && pip2 install requirements.txt && chmod +x TBomb2.0.sh && ./TBomb.sh ")

def qurxin():
    os.system("cd $HOME && apt update && upgrade -y && pkg install git && python mpv figlet -y && pip install lolcat && git clone https://github.com/fikrado/qurxin && cd qurxin && chmod +x * && sh install.sh ")

def genvirus2():
    os.system("cd $HOME && git clone git://github.com/Ign0r3dH4x0r/GenVirus.git && cd GenVirus && bash GenVirus.sh ")

def b2k4():
    os.system("cd $HOME && pkg update -y && pkg upgrade -y && pkg install python -y && pkg install python2 -y && pkg install python3 -y && pip2 install requests && pip2 install mechanize && pip3 install requests && pip3 install mechanize && pkg install git && pkg install wget -y && git clone https://github.com/BotolMehedi/b2k4.git && cd b2k4 && python2 b2k4.py ")

def angryfuzzer():
    os.system("cd $HOME && $ git clone https://github.com/ihebski/angryFuzzer.git && cd angryFuzzer && python angryFuzzer.py ")

def knockmail():
    os.system("cd $HOME && git clone https://github.com/4w4k3/KnockMail.git && cd KnockMail && sudo su && pip install -r requeriments.txt && python knock.py ")

def santetonline():
    os.system("cd $HOME && git clone https://github.com/Gameye98/santet-online && cd santet-online && python -m pip install -r requirements.txt && python santet.py ")

def Optiva():
    os.system("cd $HOME && $ git clone https://github.com/joker25000/Optiva-Framework && cd Optiva-Framework && chmod +x installer.sh && bash installer.sh && python2 optiva.py ")

def Cyberscan():
    os.system("cd $HOME && git clone https://github.com/medbenali/CyberScan.git && cd CyberScan/ && python CyberScan.py -v")

def PyPhisher():
    os.system("cd $HOME && wget https://raw.githubusercontent.com/KasRoudra/PyPhisher/main/pyphisher.py && python3 pyphisher.py ")

def Emailnuker():
    os.system("cd $HOME && git clone https://github.com/bagarrattaa/email-nuker && cd email-nuker && python3 emailbomber.py ")

def Beyawak():
    os.system("cd $HOME && pkg install git && git clone https://github.com/Ranginang67/beyawak && cd beyawak && python2 beyawak.py ")

def Xlr8bomber2():
    os.system("cd $HOME && git clone https://github.com/anubhavanonymous/XLR8_BOMBER && cd XLR8_BOMBER && python xlr8.py ")

def Wacrasher():
    os.system("cd $HOME && apt update && apt upgrade -y && pkg install python git -y && pip install colorama && git clone https://github.com/XPH4N70M/WA_CRASHER && cd WA_CRASHER && chmod +x WA_CRASHER.py && python3 WA_CRASHER.py ")

def Aoxdeface():
    os.system("cd $HOME && pkg install python2 && pip2 install requests && pkg install git && git clone https://github.com/Ranginang67/AOXdeface && cd AOXdeface && python2 aox.py ")

def Unitool():
    os.system("cd $HOME && pkg install git && pkg install python && git clone https://github.com/Zian25/UniTools-Termux && cd UniTools-Termux && python3 utx.py ")

def Hackerwasi():
    os.system("cd $HOME && pkg update -y && git clone https://github.com/evildevill/Hackerwasi && cd Hackerwasi && chmod +x * && pip3 install -r requirements.txt && python -m pip install -r requirements.txt && python Hackerwasi.py ")

def IpRover():
    os.system("cd $HOME && apt install python3 && git clone https://github.com/Cyber-Dioxide/IP_Rover/ && cd IP_Rover && pip install -r requirements.txt && python3 finder.py ")

def Rpcscan():
    os.system("cd $HOME && git clone https://github.com/HACKE-RC/RPCScan && cd RPCScan && chmod +x * && python termux-setup.py ")

def DirAttack():
    os.system("cd $HOME && pkg install git python -y && git clone https://github.com/Ranginang67/DirAttack && cd DirAttack && chmod +x install.py && python3 install.py && dirattack --help")

def VirusBuilder():
    os.system("cd $HOME && git clone https://github.com/Cyber-Dioxide/Virus-Builder/ && cd Virus-Builder && pip install -r requirements.txt && python3 Builder.py ")

def Wplksincrypt2():
    os.system("cd $HOME && apt update && apt upgrade && git clone https://github.com/samay825/Wp-Lk-Sincrypt && cd Wp-Lk-Sincrypt && python3 Run.py ")

def ipicker():
    os.system("cd $HOME && apt-get install python3 && git clone https://github.com/Deadpool2000/IPicker.git && cd IPicker && python3 ipicker.py ")

def Megafilestealer():
    os.system("cd $HOME && pkg install git -y && git clone https://github.com/ZechBron/Mega-File-Stealer && cd Mega-File-Stealer && bash setup.sh ")

def encodedecode():
    os.system("cd $HOME && pkg update && pkg upgrade -y && npm install -g bash-obfuscate && git clone https://github.com/OnlineHacKing/Encode-Decode.git && cd Encode-Decode && chmod +x enc-dec.py && python2 enc-dec.py ")

def Asciic():
    os.system("cd $HOME && apt-get install python && apt-get install python2 && pip install pyfiglet && git clone https://github.com/princekrvert/Ascii_c.git && cd Ascii_c  && chmod +x Ascii_c.py && ./Ascii_C.py ")

def Boydomos():
    os.system("cd $HOME && git clone https://github.com/AitzazImtiaz/Boydom-OS && cd Boydom-OS && chmod +x install.sh && ./install.sh ")

def Crack():
    os.system("cd $HOME && pkg upadate && pkg upgrade && git clone https://github.com/Jeeck-XD/Crack && cd Crack && git pull && python run.py")

def Shortboy():
    os.system("cd $HOME && apt install ruby && gem install lolcat && git clone https://github.com/AitzazImtiaz/Short-Boy && cd Short-Boy && make install && shortboy")

def Instagramreporter():
    os.system("cd $HOME && apt update && apt install git curl php wget -y && git clone https://github.com/jarvisstar/instagram-reporter.git && cd InstaReporter && python3 instagram-reporter.py ")

def Boydomos2():
    os.system("cd $HOME && git clone https://github.com/AitzazImtiaz/Boydom-OS && cd Boydom-OS && chmod +x install.sh && ./install.sh")

def hotstarotpbypass():
    os.system("cd $HOME && ")

def hotstarotpbypass():
    os.system("cd $HOME && ")

def hotstarotpbypass():
    os.system("cd $HOME && ")

def hotstarotpbypass():
    os.system("cd $HOME && ")

def hotstarotpbypass():
    os.system("cd $HOME && ")

def hotstarotpbypass():
    os.system("cd $HOME && ")

def hotstarotpbypass():
    os.system("cd $HOME && ")

def hotstarotpbypass():
    os.system("cd $HOME && ")






# other

# virus
def love():
    os.system("cd Cyber-D-Virus && wget https://github.com/kdo2064/18_plus_virus/blob/main/%2B18%20virus/Love_1.0.apk")


def loveyekpal():
    os.system("cd Cyber-D-Virus && wget https://github.com/kdo2064/Love_ek_Pal_Ka_Mobile_Locker/blob/main/harmful%20virus/Love%20ek%20Pal%20Ka.apk")

def kingofking():
    os.system("https://kdo2064.github.io/King-of-King/  > /dev/null 2>&1 &")
    
# Social media
def kdoinsta():
    os.system("xdg-open https://www.instagram.com/cyber_d_kdo/ > /dev/null 2>&1 &")

def hawkinsta():
    os.system("xdg-open https://www.instagram.com/cyberd_hawk/ > /dev/null 2>&1 &")
    
def krishnainsta():
    os.system("xdg-open https://www.instagram.com/krishna_.1314_/ > /dev/null 2>&1 &")

    
# updater
def updatetool():
    os.system("cd .. && rm -rf Tool-Hub && git clone  https://github.com/kdo2064/Tool-Hub && cd Tool-Hub && python3 main.py")

def uninstall():
    os.system("cd .. && rm -rf Tool-Hub")
    print(f"{bcyan}Thank you For using This tool")
    time.sleep(2)
    os.system("clear && exit")

# mainfunction.py

# first option

def mainoption():
    ask=input(f"{yellow}Choose an Option:{green}")
    if ask == "1":
        os.system("clear")
        print(logo)
        menu()
        toolsinstall()
    elif ask == "2":
        uninstall()
    elif ask == "3":
        updatetool()
    elif ask == "4":
        about()
        aboutexit()
    elif ask=="5":
        os.system("exit")
    else:
        print(f"{red}invalied option..! Try again")
        time.sleep(0.5)
        os.system("clear")
        print(logo)
        print(mainmenu)
        mainoption()

# about option 

def aboutexit():
    os.system("cd fun && play-audio about.mp3")
    ask=input(f"{yellow}Choose Option:{bgreen}")
    if ask=="1":
        kdoinsta()
    elif ask == "2":
        hawkinsta()
    elif ask == "3":
        krishnainsta()
    elif ask=="0":
        os.system("clear")
        print(logo)
        print(mainmenu)
        mainoption()
    else:
        print(f"{red}invalied option..! Try again")
        time.sleep(0.5)
        about()
        aboutexit()

# tool option

def toolsinstall():
    ask=input(f"{yellow}Choose an Option:{bgreen}")
    if ask =="1":
        os.system("cd $HOME && mkdir Cyber-D-Virus")
        cyberdvi()
        cyberdvirus()
    elif ask == "2":
        camphish()
    elif ask == "3":
        tigervirus()
    elif ask == "4":
        THYDRA()
    elif ask == "5":
        BruteX()
    elif ask == "6":
        ighack()
    elif ask == "7":
        SocialBox()
    elif ask == "8":
        maskphish()
    elif ask == "9":
        easyhack()
    elif ask == "10":
        IPTracer()
    elif ask == "11":
        mrphish()
    elif ask == "12":
        Pyshell()
    elif ask == "13":
        FacebookBruteForce()
    elif ask == "14":
        sherlock()
    elif ask == "15":
        smsbomber300free()
    elif ask == "16":
        spymer()
    elif ask == "17":
        darkdump()
    elif ask == "18":
        routersploit()
    elif ask == "19":
        EmailSpammer()
    elif ask == "20":
        emailspam()
    elif ask == "21":
        AdminHack()
    elif ask == "22":
        sqlmap()
    elif ask == "23":
        AndroRAT()
    elif ask == "24":
        TermuxCyberArmy()
    elif ask == "25":
        Ransomware()
    elif ask == "26":
        Brutegram()
    elif ask == "27":
        cctv()
    elif ask == "28":
        FoxWebInfo()
    elif ask == "29":
        foxuserfinder()
    elif ask == "30":
        foxddoser()
    elif ask == "31":
        wififtp()
    elif ask == "32":
        muclocker()
    elif ask == "33":
        bannergenerator()
    elif ask == "34":
        wishfish()
    elif ask == "35":
        mobdroid()
    elif ask == "36":
        ipgeolocation()
    elif ask == "37":
        tracenum()
    elif ask == "38":
        Foxproxyleecher()
    elif ask == "39":
        pestilence()
    elif ask == "40":
        Tbomb()
    elif ask == "41":
        ipdrone()
    elif ask == "42":
        darkflytool()
    elif ask == "43":
        exploit()
    elif ask == "44":
        youtubepro()
    elif ask == "45":
        zhoiinsta()
    elif ask == "46":
        cybersh()
    elif ask == "47":
        wplksincrypt()
    elif ask == "48":
        crackertool()
    elif ask == "49":
        matrix()
    elif ask == "50":
        redhawk()
    elif ask == "51":
        allhackingtool()
    elif ask == "52":
        lucifer()
    elif ask == "53":
        lazybee()
    elif ask == "54":
        Userfinder()
    elif ask == "55":
        Mbomb()
    elif ask == "56":
        Whatsappbanner()
    elif ask == "57":
        Ghunt()
    elif ask == "58":
        wikipromax()
    elif ask == "59":
        OSIF()
    elif ask == "60":
        antiddos()
    elif ask =="61":
        killshot() 
    elif ask == "62":
        osif()
    elif ask == "63":
        Facebooktoolkit()
    elif ask == "64":
        termuxlazyscript()
    elif ask == "65":
        Tmscanner()
    elif ask == "66":
        hotstarotpbypass()
    elif ask == "67":
        instabrute()
    elif ask == "68":
        telegramscraper()
    elif ask == "69":
        termuxstyle()
    elif ask == "70":
        osiig()
    elif ask == "71":
        beastbomber()
    elif ask == "72":
        seeu()
    elif ask == "73":
        xlr8bomber()
    elif ask == "74":
        grabcam()
    elif ask == "75":
        rootgit()
    elif ask == "76":
        snap()
    elif ask == "77":
        igbrute()
    elif ask == "78":
        lordphish()
    elif ask == "79":
        tstyle()
    elif ask == "80":
        moddedubuntu()
    elif ask == "81":
        olaotpbypass()
    elif ask == "82":
        osif()
    elif ask == "83":
        fyn()
    elif ask == "84":
        ubereatsphishing()
    elif ask == "85":
        whatsappphishing()
    elif ask == "86":
        E4GL3OSINT()
    elif ask == "87":
        Lazymux()
    elif ask == "88":
        genvirus()
    elif ask == "89":
        wannatool()
    elif ask == "90":
        paybag()
    elif ask == "91":
        freeproxy()
    elif ask == "92":
        tbomb2()
    elif ask == "93":
        qurxin()
    elif ask == "94":
        genvirus2()
    elif ask == "95":
        b2k4()
    elif ask == "96":
        angryfuzzer()
    elif ask == "97":
        knockmail()
    elif ask == "98":
        santetonline()
    elif ask == "99":
        Optiva()
    elif ask == "100":
        Cyberscan()
    elif ask == "101":
        PyPhisher()
    elif ask == "102":
        Emailnuker()
    elif ask == "103":
        Beyawak()
    elif ask == "104":
        Xlr8bomber2()
    elif ask == "105":
        Wacrasher()
    elif ask == "106":
        Aoxdeface()
    elif ask == "107":
        Unitool()
    elif ask == "108":
        Hackerwasi()
    elif ask == "109":
        IpRover()
    elif ask == "110":
        Rpcscan()
    elif ask == "111":
        DirAttack()
    elif ask == "112":
        VirusBuilder()
    elif ask == "113":
        Wplksincrypt2()
    elif ask == "114":
        ipicker()
    elif ask == "115":
        Megafilestealer()
    elif ask == "116":
        encodedecode()
    elif ask == "117":
        Asciic()
    elif ask == "118":
        Boydomos()
    elif ask == "119":
        Crack()
    elif ask == "120":
        Shortboy()
    
    elif ask == "00":
        about()
        aboutexit()

    elif ask == "0":
        os.system("clear")
        print(logo)
        print(mainmenu)
        mainoption()
    else:
        print(f"{red}invalied option..! Try again")
        time.sleep(0.5)
        os.system("clear")
        print(logo)
        menu()
        toolsinstall()

# cyber-d virus

def cyberdvirus():
    ask=input(f"{yellow}Choose Option:{bgreen}")
    if ask=="1":
        love()
        cyberdvi()
        cyberdvirus()
    elif ask == "2":
        loveyekpal()
        cyberdvi()
        cyberdvirus()
    elif ask == "3":
        kingofking()
    elif ask=="0":
        print(logo)
        print(mainmenu)
        mainoption()
    else:
        print(f"{red}invalied option..! Try again")
        time.sleep(0.5)
        about()
        aboutexit()

# main.py

os.system("clear")
print(logo)
print(f"{green}[-]Checking Internet Connection...")
os.system("cd fun && play-audio audio.mp3")

try:
        response = requests.get("https://www.google.com")
        if response.status_code == 200:
            os.system("clear")
            print(logo)
            print(f"{green}[-]Connected... ")
            time.sleep(1)    
            os.system("clear")
            print(logo)
            print(mainmenu)
            mainoption()

except Exception:
    os.system("clear")
    print(logo)
    print(f"""{red}[-]Check Your Internet Connection..and Try Again""")


"
decoded_program = base64.b64decode(base64_program).decode()
exec(decoded_program)
