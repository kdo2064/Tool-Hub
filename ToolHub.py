import base64


base64_program = "import os
import time
import requests


# ToolHub.py

black="\033[0;30m"
red="\033[0;31m"
bred="\033[1;31m"
green="\033[0;32m"
bgreen="\033[1;32m"
yellow="\033[0;33m"
byellow="\033[1;33m"
blue="\033[0;34m"
bblue="\033[1;34m"
purple="\033[0;35m"
bpurple="\033[1;35m"
cyan="\033[0;36m"
bcyan="\033[1;36m"
white="\033[0;37m"
nc="\033[00m"


def zphisher():
    os.system("pkg install tur-repo && ")

def camphish():
    os.system("cd $HOME && git clone https://github.com/techchipnet/CamPhish && cd CamPhish && bash camphish.sh")

def tigervirus():
    os.system("cd $HOME && apt update && apt upgrade -y && git clone https://github.com/Devil-Tigers/TigerVirus.git && cd TigerVirus && bash TigerVirus.sh")

def THYDRA():
    os.system("cd $HOME && apt update && apt upgrade && git clone https://github.com/isuruwa/T-HYDRA && cd T-HYDRA/Files && bash thyins.sh")

def BruteX():
    os.system("cd $HOME && apt update && apt upgrade && apt install git -y && git clone https://github.com/MrHacker-X/BruteX.git && cd BruteX && chmod +x * && bash setup.sh")

def ighack():
    os.system("cd $HOME && apt-get update -y && apt-get upgrade -y && pkg install python -y && pkg install python2 -y && pkg install git -y && pip install lolcat && git clone https://github.com/noob-hackers/ighack && cd $HOME && cd ighack && bash setup")

def SocialBox():
    os.system("cd $HOME && apt-get update && apt-get install git && git clone https://github.com/samsesh/SocialBox-Termux.git && cd SocialBox-Termux && chmod +x install-sb.sh && ./install-sb.sh")

def maskphish():
    os.system("cd $HOME && git clone https://github.com/jaykali/maskphish && cd maskphish && bash maskphish.sh")

def easyhack():
    os.system("cd $HOME && pkg update && pkg upgrade && pkg install git && git clone https://github.com/sabri-zaki/EasY_HaCk && cd EasY_HaCk/ && chmod +x install.sh")

def IPTracer():
    os.system("cd $HOME && apt update && apt install git -y && git clone https://github.com/rajkumardusad/IP-Tracer.git && cd IP-Tracer && chmod +x install && ./install")

def mrphish():
    os.system("cd $HOME && apt-get update -y && apt-get upgrade -y && pkg install python -y && pkg install python2 -y && pkg install git -y && pip install lolcat && git clone https://github.com/noob-hackers/mrphish && cd mrphish && bash setup && bash mrphish ")

def Pyshell():
    os.system("cd $HOME &&  git clone https://github.com/khalednassar702/Pyshell && cd Pyshell && ./Pyshell ")

def FacebookBruteForce():
    os.system("cd $HOME && git clone https://github.com/IAmBlackHacker/Facebook-BruteForce && cd Facebook-BruteForce && python3 -m pip install requests bs4 && python3 -m pip install mechanize && python3 fb.py ")

def sherlock():
    os.system("cd $HOME && git clone https://github.com/sherlock-project/sherlock.git && cd sherlock && python3 -m pip install -r requirements.txt")

def smsbomber300free():
    os.system("cd $HOME && apt update && apt upgrade && pkg install python git && pip install requests colorama && git clone https://github.com/Ivan-Hacker-700/SMS-Bomber-300-Free && ls && cd SMS-Bomber-300-Free && ls && python SMS-Bomber.py && cd SMS-Bomber-300-Free && python SMS-Bomber.py ")

def spymer():
    os.system("cd $HOME && apt upgrade && apt install git && git clone https://github.com/FSystem88/spymer && cd spymer/install.sh ")

def darkdump():
    os.system("cd $HOME && git clone https://github.com/josh0xA/darkdump && cd darkdump && python3 -m pip install -r requirements.txt && python3 darkdump.py --help ")

def routersploit():
    os.system("cd $HOME && git clone https://www.github.com/threat9/routersploit && cd routersploit && python3 -m pip install -r requirements.txt && python3 rsf.py ")
    
def EmailSpammer():
    os.system("cd $HOME && git clone https://github.com/mishakorzik/Email-Spammer && pip3 install requests && pip3 install smtp ")

def emailspam():
    os.system("cd $HOME && git clone https://github.com/Curioo/emailpyspam.git && pip3 install -r requirements.txt && cd emailspam/ && python3 emailspam.py  ")

def AdminHack():
    os.system("cd $HOME && git clone https://github.com/mishakorzik/AdminHack && cd AdminHack && bash setup.sh ")

def sqlmap():
    os.system("cd $HOME && git clone --depth 1 https://github.com/sqlmapproject/sqlmap.git && sqlmap-dev && python sqlmap.py -h")

def AndroRAT():
    os.system("cd $HOME && git clone https://github.com/karma9874/AndroRAT.git && cd AndroRAT && pip install -r requirements.txt")

def TermuxCyberArmy():
    os.system("cd $HOME && git clone https://github.com/Err0r-ICA/TermuxCyberArmy && cd TermuxCyberArmy && python2 TCA ")

def Ransomware():
    os.system("cd $HOME && git clone https://github.com/Err0r-ICA/Ransomware && cd Ransomware && python3 Ransomware ")

def Brutegram():
    os.system("cd $HOME && git clone https://github.com/Err0r-ICA/Brutegram && cd Brutegram && bash Brutegram ")

def cctv():
    os.system("cd $HOME && git clone https://github.com/Err0r-ICA/CCTV.git && cd CCTV && python2 CCTV")

def FoxWebInfo():
    os.system("cd $HOME && git clone https://github.com/BlackFoxTM/Fox-WebINFO/ && cd Fox-WebINFO && pip3 install -r requirements.txt && python3 wb_tools.py ")

def foxuserfinder():
    os.system("cd $HOME && git clone https://github.com/BlackFoxTM/Fox-UserFinder/fox_userfinder.py && cd fox-UserFinder && python3 fox_userfinder.py")

def foxddoser():
    os.system("cd $HOME && git clone https://github.com/BlackFoxTM/Fox-DDOSER && cd Fox-DDOSER && pip3 install -r requirements.txt && python3 fox-ddos.py ")

def wififtp():
    os.system("cd $HOME && pip3 install pyftpdlib && git clone https://github.com/KasRoudra/wififtp && cd wififtp && python3 ftp.py ")

def muclocker():
    os.system("cd $HOME && git clone https://github.com/KasRoudra/muxlock && cd muxlock && python setup.py  ")

def bannergenerator():
    os.system("cd $HOME && git clone https://github.com/KasRoudra/banner-generator && cd banner-generator && chmod +x * && bash requirements.sh && python2 generator.py ")

def wishfish():
    os.system("cd $HOME && git clone https://github.com/kinghacker0/WishFish && cd WishFish && bash wishfish.sh ")

def mobdroid():
    os.system("cd $HOME && git clone https://github.com/kinghacker0/mob-droid && cd mob-droid && python2 mob-droid.py ")

def ipgeolocation():
    os.system("cd $HOME && git clone https://github.com/BlackFoxTM/ipgeolocation && cd ipgeolocation && pip3 install requests colorama && python3 IPLocation.py ")

def tracenum():
    os.system("cd $HOME && git clone https://github.com/BlackFoxTM/trace_num && cd trace_num && pip3 install -r requirements.txt && python3 ToolHub.py  ")

def Foxproxyleecher():
    os.system("cd $HOME && git clone https://github.com/BlackFoxTM/FoxProxyLeecher.git && cd FoxProxyLeecher && pip3 install pyfiglet requests && python3 fox-proxy.py ")

def pestilence():
    os.system("cd $HOME && git clone https://www.github.com/Err0r-ICA/Pestilence && cd Pestilence && pip install --user -r requirements.txt ")

def Tbomb():
    os.system("cd $HOME && pkg install git -y  && pkg install python -y  && git clone https://github.com/TheSpeedX/TBomb.git && cd TBomb && ./TBomb.sh ")

def ipdrone():
    os.system("cd $HOME && apt-get update -y && apt-get upgrade -y && pkg install python -y && pkg install python2 -y && pkg install git -y && pip install lolcat && pip install requests && git clone https://github.com/noob-hackers/ipdrone && cd $HOME && ls && cd ipdrone && ls && python ipdrone.py -v ")

def darkflytool():
    os.system("cd $HOME && pkg install python2 && pkg install git && git clone https://github.com/Ranginang67/DarkFly-Tool && cd DarkFly-Tool && python2 install.py && python2 DarkFly ")

def exploit():
    os.system("cd $HOME && pkg update && pkg upgrade -y && pkg install python3 -y && git clone https://github.com/popeye0013/exploit && cd exploit && bash install.sh && python3 exploit.py ")

def youtubepro():
    os.system("cd $HOME && apt update && apt upgrade && git clone https://github.com/samay825/Youtube-Pro && cd Youtube-Pro && pip install -r requirements.txt && python3 ToolHub.py ")

def zhoiinsta():
    os.system("cd $HOME && apt update && apt upgrade && apt install git && apt install python && pip install instaloader && git clone https://github.com/MR-S74RK/ZHOI-INSTA/ && cd ZHOI-INSTA && chmod +x * && pip install -r requirements.txt && python3 zhoi.py")

def cybersh():
    os.system("cd $HOME && apt update -y && apt upgrade -y && pkg install git -y && pkg install python -y && pip install requests && git clone https://github.com/ShTasrif/cybersh && cd cybersh && python pkg.py  ")

def wplksincrypt():
    os.system("cd $HOME && apt update && apt upgrade && git clone https://github.com/samay825/Wp-Lk-Sincrypt && cd Wp-Lk-Sincrypt && python3 Run.py  ")

def crackertool():
    os.system("cd $HOME && apt upgrade -y && apt update -y && pkg install git && pkg install python -y && git clone https://github.com/cracker911181/Cracker-Tool && cd Cracker-Tool && python cracker-ToolHub.py ")

def deface():
    os.system("cd $HOME && pkg install python2 && pip2 install requests && pkg install git && git clone https://github.com/B012ED/deface.git && cd deface && python2 def.py ")

def matrix():
    os.system("pkg install cmatrix")
    print(f"{green}type cmatrix and click enter to run it")

def redhawk():
    os.system("cd $HOME && git clone https://github.com/Tuhinshubhra/RED_HAWK && cd RED_HAWK && pkg install php && php rhawk.php")

def allhackingtool():
    os.system("cd $HOME && apt update && apt upgrade && termux-setup-storage && apt install git && git clone https://github.com/mishakorzik/AllHackingTools && cd AllHackingTools && bash Install.sh ")

def lucifer():
    os.system("cd $HOME && git clone https://github.com/rixon-cochi/Lucifer.git && ls && cd Lucifer && chmod +x * && bash setup.sh && ls && bash instacracker.sh ")
    
def lazybee():
    os.system("cd $HOME && apt-get update -y && pip install lolcat && git clone https://github.com/noob-hackers/lazybee && cd lazybee && python2 lazybee.py ")

def Userfinder():
    os.system("cd $HOME && git clone https://github.com/mishakorzik/UserFinder && cd UserFinder && bash UserFinder.sh ")

def Mbomb():
    os.system("cd $HOME && pkg install python2 -y && pkg install git -y && git clone https://github.com/palahsu/MBomb.git && cd MBomb && python MBomb.py or python2 MBomb.py ")

def Whatsappbanner():
    os.system("cd $HOME && git clone https://github.com/kdo2064/WhatsappBanner && cd WhatsappBanner && python3 ToolHub.py")

def Ghunt():
    os.system("cd $HOME && git clone https://github.com/mxrch/GHunt && pip3 install -r requirements.txt && python check_and_gen.py && python hunt.py ")

def wikipromax():
    os.system("cd $HOME && git clone https://github.com/GH05T-HUNTER5/wiki-promax && cd wiki-promax && bash install.sh && ./wiki-promax")

def OSIF():
    os.system("cd $HOME && git clone https://github.com/ciku370/OSIF && cd OSIF && pip2 install -r requirements.txt && python2 osif.py")

def antiddos():
    os.system("cd $HOME && git clone https://github.com/anti-ddos/Anti-DDOS && cd Anti-DDOS && bash anti-ddos.sh ")






# other

# virus
def love():
    os.system("cd Cyber-D-Virus && wget https://github.com/kdo2064/18_plus_virus/blob/main/%2B18%20virus/Love_1.0.apk")


def loveyekpal():
    os.system("cd Cyber-D-Virus && wget https://github.com/kdo2064/Love_ek_Pal_Ka_Mobile_Locker/blob/main/harmful%20virus/Love%20ek%20Pal%20Ka.apk")

def kingofking():
    os.system("https://kdo2064.github.io/King-of-King/  > /dev/null 2>&1 &")
    
# Social media
def kdoinsta():
    os.system("xdg-open https://www.instagram.com/cyber_d_kdo/ > /dev/null 2>&1 &")

def hawkinsta():
    os.system("xdg-open https://www.instagram.com/cyberd_hawk/ > /dev/null 2>&1 &")
    
def krishnainsta():
    os.system("xdg-open https://www.instagram.com/krishna_.1314_/ > /dev/null 2>&1 &")

    
# updater
def updatetool():
    os.system("cd .. && rm -rf Tool-Hub && git clone  https://github.com/kdo2064/Tool-Hub && cd Tool-Hub && python3 ToolHub.py")

def uninstall():
    os.system("cd .. && rm -rf Tool-Hub")
    print(f"{bcyan}Thank you For using This tool")
    time.sleep(2)
    os.system("clear && exit")


# logo.py

logo=f"""
{bgreen}╭━━━━╮╱╱╱╱╭╮╱╱{byellow}╭╮╱╭╮╱╱╭╮{bgreen}
┃╭╮╭╮┃╱╱╱╱┃┃╱╱{byellow}┃┃╱┃┃╱╱┃┃{bgreen}
╰╯┃┃┣┻━┳━━┫┃╱╱{byellow}┃╰━╯┣╮╭┫╰━╮{bgreen}
╱╱┃┃┃╭╮┃╭╮┃┣━━{byellow}┫╭━╮┃┃┃┃╭╮┃{bgreen}
╱╱┃┃┃╰╯┃╰╯┃╰┳━{byellow}┫┃╱┃┃╰╯┃╰╯┃{bgreen}
╱╱╰╯╰━━┻━━┻━╯{byellow}╱╰╯╱{byellow}╰┻━━┻━━╯{bgreen}
    {bcyan}Tool by Cyber-D{red}[{purple}v{green}2.0{red}]
"""

secondlogo=f"""
{bgreen}╭━━━━╮╱╱╱╱╭╮╱╱{byellow}╭╮╱╭╮╱╱╭╮{bgreen}
┃╭╮╭╮┃╱╱╱╱┃┃╱╱{byellow}┃┃╱┃┃╱╱┃┃{bgreen}
╰╯┃┃┣┻━┳━━┫┃╱╱{byellow}┃╰━╯┣╮╭┫╰━╮{bgreen}
╱╱┃┃┃╭╮┃╭╮┃┣━━{byellow}┫╭━╮┃┃┃┃╭╮┃{bgreen}
╱╱┃┃┃╰╯┃╰╯┃╰┳━{byellow}┫┃╱┃┃╰╯┃╰╯┃{bgreen}
╱╱╰╯╰━━┻━━┻━╯╱╰╯╱{byellow}╰┻━━┻━━╯{bgreen}
"""


mainmenu=f"""
_____________________
|{white}----{bcyan}Cyber-D Army{white}----{red}|
|                    {red}|
|{white}-{red}x{white}-{red}[{green}1{red}]{white}-{yellow}>{green}Tools{red}       |
|{white}-{red}x{white}-{red}[{green}2{red}]{white}-{yellow}>{green}Unintall{red}    |
|{white}-{red}x{white}-{red}[{green}3{red}]{white}-{yellow}>{green}Update{red}      |
|{white}-{red}x{white}-{red}[{green}4{red}]{white}-{yellow}>{green}About {red}      |
|{white}-{red}x{white}-{red}[{green}5{red}]{white}-{yellow}>{green}Exit {red}       |
|____________________|

"""

def about():
    os.system("clear")
    print(secondlogo)
    print(f"""
{bcyan}[-]This tool is Created By Cyber-D Army

{yellow}Author    :  K.D.O x Hawk x Krishna
Github    :  https://github.com/kdo2064
Telegram  :  https://t.me/cyberdoffficial
Discord   :  https://discord.gg/v8FVzsuH
Version   :  1.0

{red}[-]Warning:

{blue}This Tool is made for educational purpose
only ! Author will not be responsible for
any misuse of this toolkit !

{bpurple}[-]About Update:
{bred}some Bug fixed..!

{bgreen}[-]Dev SocialMedia
{red}[{byellow}1{red}]{white}-{red}>{bcyan}K.D.O   : Instagram
{red}[{byellow}2{red}]{white}-{red}>{bcyan}Hawk    : Instgram
{red}[{byellow}3{red}]{white}-{red}>{bcyan}krishna : Instagram
{red}[{byellow}0{red}]{white}-{red}>{bcyan}Exit
""")


def menu():
    print(f"""
{red}[{green}1{red}]{white}-{red}>{bcyan}Cyber-D Virus          {red}[{green}31{red}]{white}-{red}>{bcyan}WifiFtp       
{red}[{green}2{red}]{white}-{red}>{bcyan}CamPhish               {red}[{green}32{red}]{white}-{red}>{bcyan}muclocker
{red}[{green}3{red}]{white}-{red}>{bcyan}TigerVirus             {red}[{green}33{red}]{white}-{red}>{bcyan}bannergenerator     
{red}[{green}4{red}]{white}-{red}>{bcyan}T-HYDRA                {red}[{green}34{red}]{white}-{red}>{bcyan}wishfish     
{red}[{green}5{red}]{white}-{red}>{bcyan}BruteX                 {red}[{green}35{red}]{white}-{red}>{bcyan}mobdroid      
{red}[{green}6{red}]{white}-{red}>{bcyan}ighack                 {red}[{green}36{red}]{white}-{red}>{bcyan}ipgeolocation      
{red}[{green}7{red}]{white}-{red}>{bcyan}SocialBox-Termux       {red}[{green}37{red}]{white}-{red}>{bcyan}tracenum    
{red}[{green}8{red}]{white}-{red}>{bcyan}maskphish              {red}[{green}38{red}]{white}-{red}>{bcyan}Foxproxyleecher    
{red}[{green}9{red}]{white}-{red}>{bcyan}EasY_HaCk              {red}[{green}39{red}]{white}-{red}>{bcyan}pestilence    
{red}[{green}10{red}]{white}-{red}>{bcyan}IP-Tracer             {red}[{green}40{red}]{white}-{red}>{bcyan}Tbomb    
{red}[{green}11{red}]{white}-{red}>{bcyan}mrphish               {red}[{green}41{red}]{white}-{red}>{bcyan}ipdrone
{red}[{green}12{red}]{white}-{red}>{bcyan}Pyshell               {red}[{green}42{red}]{white}-{red}>{bcyan}darkflytool   
{red}[{green}13{red}]{white}-{red}>{bcyan}Facebook-BruteForce   {red}[{green}43{red}]{white}-{red}>{bcyan}exploit   
{red}[{green}14{red}]{white}-{red}>{bcyan}sherlock              {red}[{green}44{red}]{white}-{red}>{bcyan}youtubepro  
{red}[{green}15{red}]{white}-{red}>{bcyan}SMS-Bomber-300-Free   {red}[{green}45{red}]{white}-{red}>{bcyan}zhoiinsta 
{red}[{green}16{red}]{white}-{red}>{bcyan}spymer                {red}[{green}46{red}]{white}-{red}>{bcyan}cybersh 
{red}[{green}17{red}]{white}-{red}>{bcyan}darkdump              {red}[{green}47{red}]{white}-{red}>{bcyan}wplksincrypt 
{red}[{green}18{red}]{white}-{red}>{bcyan}routersploit          {red}[{green}48{red}]{white}-{red}>{bcyan}crackertool 
{red}[{green}19{red}]{white}-{red}>{bcyan}Email-Spammer         {red}[{green}49{red}]{white}-{red}>{bcyan}matrix
{red}[{green}20{red}]{white}-{red}>{bcyan}emailspam             {red}[{green}50{red}]{white}-{red}>{bcyan}redhawk
{red}[{green}21{red}]{white}-{red}>{bcyan}AdminHack             {red}[{green}51{red}]{white}-{red}>{bcyan}allhackingtool 
{red}[{green}22{red}]{white}-{red}>{bcyan}sqlmap                {red}[{green}52{red}]{white}-{red}>{bcyan}lucifer 
{red}[{green}23{red}]{white}-{red}>{bcyan}AndroRAT              {red}[{green}53{red}]{white}-{red}>{bcyan}lazybee
{red}[{green}24{red}]{white}-{red}>{bcyan}TermuxCyberArmy       {red}[{green}54{red}]{white}-{red}>{bcyan}userfinder
{red}[{green}25{red}]{white}-{red}>{bcyan}Ransomware            {red}[{green}55{red}]{white}-{red}>{bcyan}MBOMBER
{red}[{green}26{red}]{white}-{red}>{bcyan}Brutegram             {red}[{green}56{red}]{white}-{red}>{bcyan}whatsappbanner 
{red}[{green}27{red}]{white}-{red}>{bcyan}CCTV                  {red}[{green}57{red}]{white}-{red}>{bcyan}ghunt
{red}[{green}28{red}]{white}-{red}>{bcyan}Fox-WebINFO           {red}[{green}58{red}]{white}-{red}>{bcyan}wikipromax
{red}[{green}29{red}]{white}-{red}>{bcyan}fox_userfinder        {red}[{green}59{red}]{white}-{red}>{bcyan}osif
{red}[{green}30{red}]{white}-{red}>{bcyan}Fox-DDOSER            {red}[{green}60{red}]{white}-{red}>{bcyan}antiddos 

{red}[{green}0{red}]{white}-{red}>{bcyan}Exit 
    """)

def cyberdvi():
    os.system("clear")
    print(logo)
    print(f"""
{red}[-]Warning:

{blue}This Virus can be Danger, Don't use
this virus for fun!

{bgreen}[-]Cyber-D Virus
{red}[{byellow}1{red}]{white}-{red}>{bcyan}Love(apk)             : +18 Harmless
{red}[{byellow}2{red}]{white}-{red}>{bcyan}Love yek pal ka(apk)  : Harmful
{red}[{byellow}3{red}]{white}-{red}>{bcyan}King of King(website) : Instagram
{red}[{byellow}0{red}]{white}-{red}>{bcyan}Exit
""")

# first option

def mainoption():
    ask=input(f"{yellow}Choose an Option:{green}")
    if ask == "1":
        os.system("clear")
        print(logo)
        menu()
        toolsinstall()
    elif ask == "2":
        uninstall()
    elif ask == "3":
        updatetool()
    elif ask == "4":
        about()
        aboutexit()
    elif ask=="5":
        os.system("exit")
    else:
        print(f"{red}invalied option..! Try again")
        time.sleep(0.5)
        os.system("clear")
        print(logo)
        print(mainmenu)
        mainoption()

def aboutexit():
    os.system("cd fun && play-audio about.mp3")
    ask=input(f"{yellow}Choose Option:{bgreen}")
    if ask=="1":
        kdoinsta()
    elif ask == "2":
        hawkinsta()
    elif ask == "3":
        krishnainsta()
    elif ask=="0":
        os.system("clear")
        print(logo)
        print(mainmenu)
        mainoption()
    else:
        print(f"{red}invalied option..! Try again")
        time.sleep(0.5)
        about()
        aboutexit()

# tool option

def toolsinstall():
    ask=input(f"{yellow}Choose an Option:{bgreen}")
    if ask =="1":
        os.system("cd $HOME && mkdir Cyber-D-Virus")
        cyberdvi()
        cyberdvirus()
    elif ask == "2":
        camphish()
    elif ask == "3":
        tigervirus()
    elif ask == "4":
        THYDRA()
    elif ask == "5":
        BruteX()
    elif ask == "6":
        ighack()
    elif ask == "7":
        SocialBox()
    elif ask == "8":
        maskphish()
    elif ask == "9":
        easyhack()
    elif ask == "10":
        IPTracer()
    elif ask == "11":
        mrphish()
    elif ask == "12":
        Pyshell()
    elif ask == "13":
        FacebookBruteForce()
    elif ask == "14":
        sherlock()
    elif ask == "15":
        smsbomber300free()
    elif ask == "16":
        spymer()
    elif ask == "17":
        darkdump()
    elif ask == "18":
        routersploit()
    elif ask == "19":
        EmailSpammer()
    elif ask == "20":
        emailspam()
    elif ask == "21":
        AdminHack()
    elif ask == "22":
        sqlmap()
    elif ask == "23":
        AndroRAT()
    elif ask == "24":
        TermuxCyberArmy()
    elif ask == "25":
        Ransomware()
    elif ask == "26":
        Brutegram()
    elif ask == "27":
        cctv()
    elif ask == "28":
        FoxWebInfo()
    elif ask == "29":
        foxuserfinder()
    elif ask == "30":
        foxddoser()
    elif ask == "31":
        wififtp()
    elif ask == "32":
        muclocker()
    elif ask == "33":
        bannergenerator()
    elif ask == "34":
        wishfish()
    elif ask == "35":
        mobdroid()
    elif ask == "36":
        ipgeolocation()
    elif ask == "37":
        tracenum()
    elif ask == "38":
        Foxproxyleecher()
    elif ask == "39":
        pestilence()
    elif ask == "40":
        Tbomb()
    elif ask == "41":
        ipdrone()
    elif ask == "42":
        darkflytool()
    elif ask == "43":
        exploit()
    elif ask == "44":
        youtubepro()
    elif ask == "45":
        zhoiinsta()
    elif ask == "46":
        cybersh()
    elif ask == "47":
        wplksincrypt()
    elif ask == "48":
        crackertool()
    elif ask == "49":
        matrix()
    elif ask == "50":
        redhawk()
    elif ask == "51":
        allhackingtool()
    elif ask == "52":
        lucifer()
    elif ask == "53":
        lazybee()
    elif ask == "54":
        Userfinder()
    elif ask == "55":
        Mbomb()
    elif ask == "56":
        Whatsappbanner()
    elif ask == "57":
        Ghunt()
    elif ask == "58":
        wikipromax()
    elif ask == "59":
        OSIF()
    elif ask == "60":
        antiddos()

    elif ask == "0":
        print(logo)
        print(mainmenu)
        mainoption()
    else:
        print(f"{red}invalied option..! Try again")
        time.sleep(0.5)
        os.system("clear")
        print(logo)
        menu()
        toolsinstall()

# cyber-d virus

def cyberdvirus():
    ask=input(f"{yellow}Choose Option:{bgreen}")
    if ask=="1":
        love()
        cyberdvi()
        cyberdvirus()
    elif ask == "2":
        loveyekpal()
        cyberdvi()
        cyberdvirus()
    elif ask == "3":
        kingofking()
    elif ask=="0":
        print(logo)
        print(mainmenu)
        mainoption()
    else:
        print(f"{red}invalied option..! Try again")
        time.sleep(0.5)
        about()
        aboutexit()


os.system("clear")
print(logo)
print(f"{green}[-]Checking Internet Connection...")
os.system("cd fun && play-audio audio.mp3")


try:
    if __name__=="__main__":
        response = requests.get("https://www.google.com")
        if response.status_code == 200:
            os.system("clear")
            print(logo)
            print(f"{green}[-]Connected... ")
            time.sleep(1)    
            os.system("clear")
            print(logo)
            print(mainmenu)
            mainoption()

except Exception:
    os.system("clear")
    print(logo)
    print(f"""{red}[-]Check Your Internet Connection..and Try Again""")

"

decoded_program = base64.b64decode(base64_program).decode()
exec(decoded_program)



    






    